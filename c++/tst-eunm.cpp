#include <iostream>
#include <vector>

using namespace std;

typedef enum pktfuncs {
    /*
     * Keep this list organized into message groups such as CONN, STG, and so on
     * as the debug trace mechanism depends on it.
     */

    /* Packet Connection functions */
    PKT_CONN_TEST_API,
    START_PKT_CONN_MSG_TYPE = PKT_CONN_TEST_API,            // First CONN msg - KEEP UP TO DATE
    PKT_CONN_PP_VLAN_PORT_CREATE,
    PKT_CONN_PCNP_VLAN_PORT_CREATE,
    PKT_CONN_CEP_VLAN_PORT_CREATE,
    PKT_CONN_PEP_INGRESS_PROPERTIES_SET,
    PKT_CONN_PORT_MTU_SET,
    PKT_CONN_VLAN_PORT_TAGGED_ENABLE,
    PKT_CONN_PORT_INGR_FILTER_ENABLE,
    PKT_CONN_PORT_INGR_ETHTYPE_SET,
    PKT_CONN_PORT_EGR_ETHTYPE_SET,
    PKT_CONN_PORT_DEFAULT_PRIORITY_SET,
    PKT_CONN_PORT_SWITCH_CONTEXT_SET,
    PKT_CONN_LIF_DELETE,
    PKT_CONN_LIF_DATA_GET,
    PKT_CONN_BRIDGE_PORT_TYPE_SET,
    PKT_CONN_BRIDGE_PORT_TYPE_GET,
    PKT_CONN_ACCEPT_FRAME_TYPE_PORT_SET,
    PKT_CONN_UNKNOWN_MCAST_DMAC_FLOOD_ENABLE,
    PKT_CONN_MAC_TABLE_AGE_TIMER_SET,
    PKT_CONN_MAC_LEARNING_VLAN_LIMIT_SET,
    PKT_CONN_MAC_TABLE_FLUSH,
    PKT_CONN_PRIORITY_MAP_TEMPLATE_SET,
    PKT_CONN_PRIORITY_TCDP_MAP_TEMPLATE_SET,
    PKT_CONN_PRIORITY_MAP_TEMPLATE_DELETE,
    PKT_CONN_PRIORITY_TCDP_MAP_TEMPLATE_DELETE,
    PKT_CONN_PRIORITY_MAP_PORT_SET,
    PKT_CONN_PRIORITY_MAP_LIF_SET,
    PKT_CONN_PRIORITY_TCDP_MAP_LIF_SET,
    PKT_CONN_PRIORITY_MAP_TEMPLATE_GET,
    PKT_CONN_PRIORITY_TCDP_MAP_TEMPLATE_GET,
    PKT_CONN_PRIORITY_CUSTOMER_MODE_SET,
    PKT_CONN_MACT_UCAST_ADD,
    PKT_CONN_MACT_MCAST_ADD,
    PKT_CONN_MACT_ADDR_DELETE,
    PKT_CONN_PVID_SET,
    PKT_CONN_PORT_MACADDR_SET,
    PKT_CONN_PORT_MACADDR_GET,
    PKT_CONN_MAC_TABLE_GET,
    PKT_CONN_MIRROR_PORT_CREATE,
    PKT_CONN_MIRROR_PORT_DESTROY,
    PKT_CONN_PORT_TO_MIRROR_ADD,
    PKT_CONN_PORT_TO_MIRROR_REMOVE,
    PKT_CONN_MPLS_VLAN_PORT_CREATE,
    PKT_CONN_MPLS_TUNNEL_PORT_CREATE,
    PKT_CONN_MPLS_TUNNEL_PORT_UPDATE,
    PKT_CONN_PROTECTED_MPLS_TUNNEL_PORT_PAIR_CREATE,
    PKT_CONN_PROTECTED_MPLS_TUNNEL_PORT_REPLACE,
    PKT_CONN_MPLS_PWE_PORT_CREATE,
    PKT_CONN_MPLS_LSP_XCONN_CREATE,
    PKT_CONN_MPLS_LSP_XCONN_DELETE,
    PKT_CONN_OAM_LIF_GET,
    PKT_CONN_SWITCH_VLAN_PORT_CREATE,
    PKT_CONN_SWITCH_SEND_VLAN_TO_PWE_SET,
    PKT_CONN_ACCESS_VLAN_PORT_CREATE,
    PKT_CONN_ACCESS_PARENT_VLAN_PORT_CREATE,
    PKT_CONN_LIF_TMFLOWID_UPDATE,
    PKT_CONN_OAM_TUNNEL_VLAN_PORT_CREATE,
    PKT_CONN_OAM_DEFAULT_PEP_PORT_CREATE,
    PKT_CONN_UNPROTECTED_TUNNEL_VLAN_PORT_CREATE,
    PKT_CONN_PROTECTED_TUNNEL_VLAN_PORT_PAIR_CREATE,
    PKT_CONN_PROTECTED_TUNNEL_VLAN_PORT_REPLACE,
    PKT_CONN_PROTECTED_TUNNEL_VLAN_PORT_REPLACE_STATUS_GET,
    PKT_CONN_P2P_XCONN_CREATE,
    PKT_CONN_P2P_XCONN_DELETE,
    PKT_CONN_P2P_XCONN_GET,
    PKT_PROT_RING_PROT_GRP_ENABLE, //ERPS amd L2CP are part of PKT CONN functions
    PKT_PROT_RING_PROT_GRP_DISABLE,
    PKT_PROT_RING_PROT_GRP_MODIFY,
    PKT_PROT_RING_FORCE_FLOOD_UPDATE,
    PKT_PROT_RING_PROT_PORT_ADD,
    PKT_PROT_RING_PROT_PORT_DELETE,
    PKT_PROT_RING_CONT_VLAN_ADD,
    PKT_PROT_RING_CONT_VLAN_DELETE,
    PKT_PROT_RING_PROT_VLAN_ADD,
    PKT_PROT_RING_PROT_VLAN_DELETE,
    PKT_PROT_RING_FLUSH_MACT_TBL,
    PKT_CFG_AVAIlABILITY_DETECT, //add for detect pkt config availability
    PKT_L2CP_ENTRY_CREATE,
    PKT_L2CP_ENTRY_DELETE,
    PKT_L2_VLAN_LPBK_SET,
    END_PKT_CONN_MSG_TYPE = PKT_L2_VLAN_LPBK_SET,              // Last CONN msg - KEEP UP TO DATE

    /* PKT Spanning Tree Group functions */
    PKT_STG_GROUP_CREATE,
    START_PKT_STG_MSG_TYPE = PKT_STG_GROUP_CREATE,              // First STG msg - KEEP UP TO DATE
    PKT_STG_GROUP_DELETE,
    PKT_STG_GROUP_LIST_GET,
    PKT_STG_VLAN_ADD,
    PKT_STG_VLAN_DELETE,
    PKT_STG_VLAN_DELETE_ALL,
    PKT_STG_VLAN_LIST_GET,
    PKT_STG_PORT_STATE_SET,
    PKT_STG_PORT_STATE_GET,
    END_PKT_STG_MSG_TYPE = PKT_STG_PORT_STATE_GET,              // Last STG STG - KEEP UP TO DATE

    /* PKT LAG Functions */
    PKT_LAG_TRUNK_PORT_CONFIGURE,
    START_PKT_LAG_MSG_TYPE = PKT_LAG_TRUNK_PORT_CONFIGURE,      // First LAG msg - KEEP UP TO DATE
    PKT_LAG_TRUNK_PORT_RESTORE,
    PKT_LAG_TRUNK_SET,
    PKT_LAG_TRUNK_DELETE,
    PKT_LAG_TRUNK_ADD,
    PKT_LAG_TRUNK_REMOVE,
    PKT_LAG_TRUNK_TRAFFIC_ENABLE_SET,
    PKT_LAG_TRUNK_TRAFFIC_ENABLE_GET,
    PKT_LAG_TRUNK_GET,
    END_PKT_LAG_MSG_TYPE = PKT_LAG_TRUNK_GET,                   // Last LAG msg - KEEP UP TO DATE

    /* PKT PROT Functions */
    PKT_PROT_ACTIVE_PATH_SET,
    START_PKT_PROT_MSG_TYPE = PKT_PROT_ACTIVE_PATH_SET,         // First PROT msg - KEEP UP TO DATE
    PKT_PROT_ACTIVE_PATH_GET,
    END_PKT_PROT_MSG_TYPE = PKT_PROT_ACTIVE_PATH_GET,           // Last PROT msg - KEEP UP TO DATE

    /* PKT QoS Functions */
    PKT_QOS_CREATE_METER_PROFILE,
    START_PKT_QOS_MSG_TYPE = PKT_QOS_CREATE_METER_PROFILE,      // First QOS msg - KEEP UP TO DATE
    PKT_QOS_CREATE_METER,
    PKT_QOS_CHANGE_METER_PROFILE,
    PKT_QOS_CHANGE_METER_PROFILE_PARAMS,
    PKT_QOS_ADD_METER_TO_GROUP,
    PKT_QOS_DELETE_METER_FROM_GROUP,
    PKT_QOS_DELETE_METER,
    PKT_QOS_DELETE_METER_PROFILE,
    PKT_QOS_ADD_CHANGE_CLASS_RULE,
    PKT_QOS_DELETE_CLASS_RULE,
    PKT_QOS_BW_POL_LAYER,
    PKT_QOS_STORM_CONTROL,
    PKT_QOS_USE_DEI,
    END_PKT_QOS_MSG_TYPE = PKT_QOS_USE_DEI,                     // Last QOS msg - KEEP UP TO DATE

    /* PKT PDU/FABCOMM Functions */
    PKT_FABCOMM_SEND,
    START_PKT_PDU_MSG_TYPE = PKT_FABCOMM_SEND,                  // First PDU msg - KEEP UP TO DATE
    PKT_SLOW_PATH_SEND,
    PKT_PDU_SLOW_PATH_CPU_TRAP_SET,
    PKT_PDU_SLOW_PATH_DROP_SET,
    PKT_PDU_SLOW_PATH_TUNNEL_SET,
    PKT_PDU_SLOW_PATH_ACTION_DELETE,
    PKT_PDU_DHCP_RELAY_STATE_SET,
    PKT_PDU_DHCP_RELAY_PORT_TRUST_SET,
    END_PKT_PDU_MSG_TYPE = PKT_PDU_DHCP_RELAY_PORT_TRUST_SET,   // Last PDU msg - KEEP UP TO DATE

    /* EVENT Functions */
    PKT_EVENT,
    START_PKT_EVENT_MSG_TYPE = PKT_EVENT,                       // First EVENT msg - KEEP UP TO DATE
    PKT_REGISTER_EVENT,
    PKT_UNREGISTER_EVENT,
    END_PKT_EVENT_MSG_TYPE = PKT_UNREGISTER_EVENT,              // Last EVENT msg - KEEP UP TO DATE

    PKT_NUM_FUNC_MSG_TYPES      /* Number of msg types in enum above - KEEP LAST! */

} PKTFUNCS;


int main()
{
    int a = 0;
    PKTFUNCS enTest;

    enTest = PKT_NUM_FUNC_MSG_TYPES;

    printf("This is a enum data type: %d\n", enTest);

    switch(a) {
    case PKT_CONN_TEST_API:
        cout << "PKT_CONN_TEST_API" << endl;
        break;
    case PKT_CONN_PP_VLAN_PORT_CREATE:
        cout << "PKT_CONN_PP_VLAN_PORT_CREATE" << endl;
    default:
        break;
    }


    return 0;
}